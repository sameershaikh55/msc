image: node
clone:
  depth: full

definitions:
  caches:
    apk: /var/cache/apk
    sonar: ~/.sonar/cache

steps:
  - step: &branch-environment
      name: Branch Environment
      script:
        - echo "Setting up branch environment..."
      artifacts:
        - environment.sh

  - step: &setup-environment
      name: Setup Environment
      script:
        - echo "Setting up environment..."
        - source environment.sh
        - "[ \"$ENVIRONMENT\" = \"local\" ] && source .env.local || [ \"$ENVIRONMENT\" = \"development\" ] && source .env.development || [ \"$ENVIRONMENT\" = \"staging\" ] && source .env.staging || [ \"$ENVIRONMENT\" = \"production\" ] && source .env.production || (echo \"Invalid environment: $ENVIRONMENT\" && exit 1)"
        - echo export AWS_DEFAULT_REGION=eu-west-1 >> environment.sh
        - echo export APP_VERSION=$(cat CHANGELOG.md | egrep -m 1 "\#\# \[([0-9]+\.[0-9]+\.[0-9]+)\]" | egrep -o "[0-9]+\.[0-9]+\.[0-9]+").$BITBUCKET_BUILD_NUMBER >> environment.sh
        - echo export NEXT_PUBLIC_ORDER_KEY=$NEXT_PUBLIC_ORDER_KEY >> environment.sh
        - echo export NEXT_PUBLIC_TEMP_LOGIN_PASSWORD=$NEXT_PUBLIC_TEMP_LOGIN_PASSWORD >> environment.sh
      artifacts:
        - environment.sh

  - step: &setup-account-environment
      name: Setup Account Environment
      script:
        - echo export ACCOUNT_ID=$ACCOUNT_ID >> environment.sh
        - echo export ENVIRONMENT=$ENVIRONMENT >> environment.sh
        - echo export TF_WORKSPACE=$TF_WORKSPACE >> environment.sh
      artifacts:
        - environment.sh

  - step: &check-version
      name: Check Version
      script:
        - git fetch -t
        - export tag_version=$(git for-each-ref --format '%(refname)' refs/tags | cut -d'/' -f 3 | sort -rV | head -n 1)
        - export changelog_version=$(cat CHANGELOG.md | egrep -m 1 "\#\# \[([0-9]+\.[0-9]+\.[0-9]+)\]" | egrep -o "[0-9]+\.[0-9]+\.[0-9]+")
        - echo tag_version=$tag_version changelog_version=$changelog_version
        - if [ "$tag_version" == "$changelog_version" ]; then echo NO NEW CHANGELOG ENTRY IN PLACE && exit 1; fi
        - if [ "$tag_version" == "$(printf '%s\n' "$changelog_version" "$tag_version" | sort -Vr | head -n1)" ]; then echo LATEST CHANGELOG ENTRY NOT HIGHEST VERSION && exit 1; fi

  - step: &create-tag
      name: Create-Tag
      script:
        - git tag $(cat CHANGELOG.md | egrep -m 1 "\#\# \[([0-9]+\.[0-9]+\.[0-9]+)\]" | egrep -o "[0-9]+\.[0-9]+\.[0-9]+")
        - git push origin --tags

  - step: &test
      name: Test
      caches:
        - node
        - apk
      script:
        - npm ci
        - npm run test -- --passWithNoTests
      artifacts:
        - coverage/coverage-final.json
        - coverage/lcov.info

  - step: &sonar-analysis
      name: Sonar Analysis
      image: bash:5.0
      caches:
        - sonar
      script:
        - source environment.sh
        - pipe: sonarsource/sonarcloud-scan:1.2.1
          variables:
            DEBUG: "true"
            EXTRA_ARGS: "-Dsonar.branch.name=$BITBUCKET_BRANCH"

  - step: &build
      name: Build
      size: 2x
      caches:
        - node
        - apk
      script:
        - source environment.sh
        - npm ci
        - cp .env.$ENVIRONMENT .env.local
        - CI=false npm run export
        - mkdir build || { echo 'mkdir command failed' ; exit 1; }
        - cp -r out/* build/ || { echo 'cp command failed' ; exit 1; }
      artifacts:
        - build/**

  - step: &sls-deploy
      name: Serverless Deploy
      image: node:16
      caches:
        - node
      script:
        - python --version
        - source environment.sh
        - curl https://s3.amazonaws.com/aws-cli/awscli-bundle-1.18.200.zip -o awscli-bundle.zip
        - unzip awscli-bundle.zip
        - ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - npm install
        - $(aws sts assume-role --role-arn arn:aws:iam::${ACCOUNT_ID}:role/Deployment --role-session-name bitbucket_${BITBUCKET_REPO_SLUG}_${BITBUCKET_BUILD_NUMBER} --query 'Credentials.[`export#AWS_ACCESS_KEY_ID=`,AccessKeyId,`#AWS_SECRET_ACCESS_KEY=`,SecretAccessKey,`#AWS_SESSION_TOKEN=`,SessionToken]' --output text | sed 's/\t//g' | sed 's/#/ /g')
        - if [ -z "$AWS_ACCESS_KEY_ID" ]; then echo UNABLE TO ASSUME && exit 1; fi
        - pwd
        - ls -la
        - npx sls deploy --stage $ENVIRONMENT
      artifacts:
        - .env

pipelines:
  default:
    - step: *branch-environment
    - step: *setup-environment
    - step: *setup-account-environment
    - step: *build

  branches:
    master:
      - step:
          <<: *branch-environment
          script:
            - echo export ACCOUNT_ID=867213857120  >> environment.sh
            - echo export ENVIRONMENT=production >> environment.sh
            - echo export TF_WORKSPACE=production >> environment.sh
            - source environment.sh
            - echo $ENVIRONMENT
      - step: *setup-environment
      - step: *check-version
      - step: *build
      - step: *sls-deploy
      - step: *create-tag

    "{release/*,hotfix/*}":
      - step:
          <<: *branch-environment
          script:
            - echo export ACCOUNT_ID=395526924801  >> environment.sh
            - echo export ENVIRONMENT=staging >> environment.sh
            - echo export TF_WORKSPACE=staging >> environment.sh
            - source environment.sh
            - echo $ENVIRONMENT
      - step: *setup-environment
      - step: *check-version
      - step: *build
      - step: *sls-deploy

    develop:
      - step:
          <<: *branch-environment
          script:
            - echo export ACCOUNT_ID=836263696447  >> environment.sh
            - echo export ENVIRONMENT=development >> environment.sh
            - echo export TF_WORKSPACE=development >> environment.sh
            - source environment.sh
            - echo $ENVIRONMENT
      - step: *setup-environment
      - step: *build
      - step: *sls-deploy
